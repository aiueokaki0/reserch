package RSLBench;

import RSLBench.Assignment.Assignment;
import RSLBench.Comm.CommunicationLayer;

import static rescuecore2.misc.Handy.objectsToIDs;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Collections;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;

import rescuecore2.messages.Command;
import rescuecore2.standard.entities.AmbulanceCentre;
import rescuecore2.standard.entities.Blockade;
import rescuecore2.standard.entities.Building;
import rescuecore2.standard.entities.Civilian;
import rescuecore2.standard.entities.FireBrigade;
import rescuecore2.standard.entities.Refuge;
import rescuecore2.standard.entities.StandardEntity;
import rescuecore2.standard.entities.StandardEntityURN;
import rescuecore2.worldmodel.ChangeSet;
import rescuecore2.worldmodel.EntityID;
import RSLBench.Helpers.DistanceSorter;
import RSLBench.Helpers.Logging.Markers;
import RSLBench.Search.SearchResults;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;


/**
 * A sample fire brigade agent.
 */
public class CivilianAgent extends PlatoonAbstractAgent<Civilian>
{
    private static final Logger Logger = LogManager.getLogger(CivilianAgent.class);

    
    
    public static HashMap<EntityID,Boolean> rescued = new HashMap<Integer,Boolean>();

    public CivilianAgent() {
    	Logger.debug(Markers.BLUE, "Civilian Agent CREATED");
    }

    @Override
    public String toString() {
        return "Civilian agent";
    }

    @Override
    protected void postConnect() {
        super.postConnect();
        model.indexClass(StandardEntityURN.ROAD);
        rescued.put(getID(), false);
        
        Logger.info("{} connected",this);
    }

    @Override
    protected void think(int time, ChangeSet changed, Collection<Command> heard) {

        if (time == config.getIntValue(kernel.KernelConstants.IGNORE_AGENT_COMMANDS_KEY)) {
            // Subscribe to station channel
            sendSubscribe(time, Constants.STATION_CHANNEL);
        }

        if (time < config.getIntValue(Constants.KEY_START_EXPERIMENT_TIME)) {
            return;
        }

        if (time == config.getIntValue(Constants.KEY_END_EXPERIMENT_TIME))
            System.exit(0);

        
        // Start to act
        // /////////////////////////////////////////////////////////////////////
        Civilian me = me();

        // Are we safe?
        // //////////////////////////////////////
        if (location() instanceof Refuge || location() instanceof AmbulanceCentre) {
            sendRest(time);
            return;
        }

        // Are we healthy and not hurt? Go to refuge
        // //////////////////////////////////////
        if (me.getHP() == 10000) {
            // Head for a refuge
            List<EntityID> path = search.search(me().getPosition(), refugeIDs,
                    connectivityGraph, distanceMatrix).getPathIds();
            if (path != null) {
                // Logger.debugColor("Moving to refuge", //Logger.FG_MAGENTA);
                sendMove(time, path);
                Logger.info(Markers.LIGHT_BLUE,"HP = {}, WALKING TO REFUGE",me.getHP());
                return;
            } else {
                // Logger.debugColor("Couldn't plan a path to a refuge.",
                // //Logger.BG_RED);
                path = randomWalk();
                // Logger.debugColor("Moving randomly", //Logger.FG_MAGENTA);
                sendMove(time, path);
                return;
            }
        }

        // If we're hurt but we got rescued, head to ambulanceCenter
        if (rescued) {
            // Head for a refuge
            List<EntityID> path = search.search(me().getPosition(), ambulanceCenterIDs,
                    connectivityGraph, distanceMatrix).getPathIds();
            if (path != null) {
                // Logger.debugColor("Moving to refuge", //Logger.FG_MAGENTA);
                sendMove(time, path);
                return;
            } else {
                // Logger.debugColor("Couldn't plan a path to a refuge.",
                // //Logger.BG_RED);
                path = randomWalk();
                // Logger.debugColor("Moving randomly", //Logger.FG_MAGENTA);
                sendMove(time, path);
                return;
            }
        }
        
        // If we're hurt but not rescued, we wait
        sendRest(time);
    }

    @Override
    protected EnumSet<StandardEntityURN> getRequestedEntityURNsEnum() {
        return EnumSet.of(StandardEntityURN.CIVILIAN);
    }    

}